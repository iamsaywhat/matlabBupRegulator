%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  VerticeSelect - Выбор оптимального входа в манёвр "коробка"
%
%  AMP - Координаты точки, от которой расчитывается вход
%  BLU - Координаты точки левого верхнего угла коробки
%  BLD - Координаты точки левого нижнего угла коробки 
%  BRU - Координаты точки правого верхнего угла коробки 
%  BRD - Координаты точки нижнего верхнего угла коробки
%
%  Возвращает номер вершины оптимального входа
%      1 - BLU, 2 - BLD, 3 - BRU, 4 - BRD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Vertice = VerticeSelect(AMP, BLU, BLD, BRU, BRD)
    %% Функция определения точки входа в "посадочной коробке"
    D_BLU = DistanceCalculator(AMP,BLU);
    D_BLD = DistanceCalculator(AMP,BLD);
    D_BRU = DistanceCalculator(AMP,BRU);
    D_BRD = DistanceCalculator(AMP,BRD);
    %% Соответсвие значения Vertice и вершин коробки
    % 1 - Левая верхняя
    % 2 - Левая нижняя
    % 3 - Правая верхняя
    % 4 - Правая нижняя
    x = [D_BLU, D_BLD, D_BRU, D_BRD]; 
    Vertice = 1;
    for i = 1:1:3
        if x(i+1) < x(Vertice)
            Vertice = i+1;
        end
    end
    Vertice = uint8(Vertice);
end